import streamlit as st
import pandas as pd
from PIL import Image
import base64
from io import BytesIO
import plotly.express as px
import json
from datetime import datetime
import numpy as np
from fonctions import visualise


st.set_page_config(
    page_title="Exploration des DonnÃ©es des Phases- Station Wave 2",
    page_icon="ğŸ“Š",
    layout="wide"
)

st.title("ğŸ“Š Exploration des DonnÃ©es des Phases")
st.write(
    """
    Explorez les donnÃ©es de performance des diffÃ©rentes phases de traitement de la station de dessalement Wave 2.
    SÃ©lectionnez une phase, dÃ©finissez une pÃ©riode et visualisez les paramÃ¨tres clÃ©s.
    """
)
# Chargement des donnÃ©es
sheets = ["SELF CLEANING", "UF", "RO-A", "RO-B", "RO-C", "RO-D", "PRODUCTION"]
data = {}
for sheet in sheets:
    data[sheet] = pd.read_excel('SUIVI DIPS (1).xlsx', sheet_name=sheet)

# Barre latÃ©rale pour la sÃ©lection de la phase
st.sidebar.header("Options de Visualisation")
don = st.sidebar.radio("Phases de traitement :", sheets)

# Charger la feuille sÃ©lectionnÃ©e
df = data[don]

# PrÃ©paration des donnÃ©es
df['date'] = pd.to_datetime(df['date'])
df['date'] = df['date'].dt.strftime('%d/%m/%Y')  # Format 'dd/mm/yyyy'

# DÃ©finir les dates de dÃ©but et de fin
startDate = pd.to_datetime(df["date"], format='%d/%m/%Y').min()
endDate = pd.to_datetime(df["date"], format='%d/%m/%Y').max()

# SÃ©lection des dates dans la barre latÃ©rale
st.sidebar.subheader("Filtrer par pÃ©riode")
date1 = pd.to_datetime(st.sidebar.date_input("Date de dÃ©but", startDate))
date2 = pd.to_datetime(st.sidebar.date_input("Date de fin", endDate))

# Filtrer les donnÃ©es par plage de dates
df['date'] = pd.to_datetime(df['date'], format='%d/%m/%Y')
df = df[(df["date"] >= date1) & (df["date"] <= date2)]
df['date'] = df['date'].dt.strftime('%d/%m/%Y')  # Format pour affichage

# SÃ©lection du paramÃ¨tre Ã  visualiser
st.sidebar.subheader("SÃ©lectionnez un paramÃ¨tre")
param = st.sidebar.selectbox(f'ParamÃ¨tre', df.columns[2:])

# Titre de la phase
st.subheader(f"Phase de traitement : {don}")
st.write(f"### PÃ©riode : {date1.strftime('%d/%m/%Y')} - {date2.strftime('%d/%m/%Y')}")

# Affichage des donnÃ©es filtrÃ©es
st.write("### DonnÃ©es FiltrÃ©es")
st.dataframe(df)

# Appel de la fonction de visualisation
st.write(f"### Visualisation de {param}")
visualise(df, param, don)
# sheets =["SELF CLEANING","UF","RO-A","RO-B","RO-C","RO-D","PRODUCTION"]
# data = {}
# for sheet in sheets:
#         data[sheet] = pd.read_excel('SUIVI DIPS (1).xlsx',sheet_name=sheet)
# don = st.sidebar.radio('Phases de traitement:',
#                                 [
#                                     "SELF CLEANING",
#                                     "UF",
#                                     "RO-A",
#                                     "RO-B",
#                                     "RO-C",
#                                     "RO-D",
#                                     "PRODUCTION"
#                                     ])  
# df = pd.read_excel('SUIVI DIPS (1).xlsx',sheet_name=don)

# df['date'] = pd.to_datetime(df['date'])
# df['date'] = df['date'].dt.strftime('%d/%m/%Y')  # Format to 'dd/mm/yyyy'

# # Start and end dates for filtering (convert back to datetime)
# startDate = pd.to_datetime(df["date"], format='%d/%m/%Y').min()
# endDate = pd.to_datetime(df["date"], format='%d/%m/%Y').max()

# col1, col2 = st.columns((2))
# with col1:
#     date1 = pd.to_datetime(st.date_input("Start Date", startDate))
# with col2:
#     date2 = pd.to_datetime(st.date_input("End Date", endDate))

# # Convert back to datetime for filtering
# df['date'] = pd.to_datetime(df['date'], format='%d/%m/%Y')
# df = df[(df["date"] >= date1) & (df["date"] <= date2)]

# # Convert back to formatted string for display
# df['date'] = df['date'].dt.strftime('%d/%m/%Y')


# param = st.selectbox(f'ParamÃ¨tre', df.columns[2:]) 
# visualise(df,param,don)