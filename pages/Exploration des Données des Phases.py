import streamlit as st
import pandas as pd
from PIL import Image
import base64
from io import BytesIO
import plotly.express as px
import json
from datetime import datetime
import numpy as np
from fonctions import visualise


st.set_page_config(
    page_title="Exploration des Donn√©es des Phases- Station Wave 2",
    page_icon="üìä",
    layout="wide"
)

st.title("üìä Exploration des Donn√©es des Phases")
st.markdown(
    """
    <div style="
        text-align: justify; 
        color: #333333; 
        font-family: Arial, sans-serif; 
        line-height: 1.6; 
        border-left: 4px solid #4A90E2; 
        padding-left: 10px;
        margin-bottom: 20px;
    ">
        <strong>Explorez les donn√©es de performance</strong> des diff√©rentes phases de traitement de la station de dessalement <strong>Wave 2</strong>. 
        S√©lectionnez une phase, d√©finissez une p√©riode et visualisez les param√®tres cl√©s pour mieux comprendre et analyser le processus.
    </div>
    """,
    unsafe_allow_html=True
)

# Chargement des donn√©es
sheets = ["SELF CLEANING", "UF", "RO-A", "RO-B", "RO-C", "RO-D", "PRODUCTION"]
data = {}
for sheet in sheets:
    data[sheet] = pd.read_excel('SUIVI DIPS (1).xlsx', sheet_name=sheet)

# Barre lat√©rale pour la s√©lection de la phase
st.sidebar.header("Options de Visualisation")
don = st.sidebar.radio("Phases de traitement :", sheets)

# Charger la feuille s√©lectionn√©e
df = data[don]

# Pr√©paration des donn√©es
df['date'] = pd.to_datetime(df['date'])
df['date'] = df['date'].dt.strftime('%d/%m/%Y')  # Format 'dd/mm/yyyy'

# D√©finir les dates de d√©but et de fin
startDate = pd.to_datetime(df["date"], format='%d/%m/%Y').min()
endDate = pd.to_datetime(df["date"], format='%d/%m/%Y').max()

# S√©lection des dates dans la barre lat√©rale
st.sidebar.subheader("Filtrer par p√©riode")
date1 = pd.to_datetime(st.sidebar.date_input("Date de d√©but", startDate))
date2 = pd.to_datetime(st.sidebar.date_input("Date de fin", endDate))

# Filtrer les donn√©es par plage de dates
df['date'] = pd.to_datetime(df['date'], format='%d/%m/%Y')
df = df[(df["date"] >= date1) & (df["date"] <= date2)]
df['date'] = df['date'].dt.strftime('%d/%m/%Y')  # Format pour affichage

st.sidebar.markdown(
    """
    <h3 style="
        color: #4A90E2; 
        font-family: Arial, sans-serif; 
        margin-bottom: 15px;
    ">
        S√©lectionnez un param√®tre
    </h3>
    """,
    unsafe_allow_html=True
)

# S√©lection du param√®tre √† visualiser
param = st.sidebar.selectbox(
    'Param√®tre', 
    df.columns[2:],
    help="Choisissez un param√®tre √† afficher parmi les colonnes disponibles."
)

# Style pour le titre de la phase
st.markdown(
    f"""
    <h2 style="
        text-align: center; 
        color: #4A90E2; 
        font-family: Arial, sans-serif; 
        margin-bottom: 10px;
    ">
        Phase de traitement : {don}
    </h2>
    """,
    unsafe_allow_html=True
)

# P√©riode format√©e avec un style professionnel
st.markdown(
    f"""
    <h4 style="
        text-align: center; 
        color: #333333; 
        font-family: Arial, sans-serif; 
        margin-top: 5px;
    ">
        P√©riode : {date1.strftime('%d/%m/%Y')} - {date2.strftime('%d/%m/%Y')}
    </h4>
    """,
    unsafe_allow_html=True
)

st.markdown(
    f"""
    <h3 style="
        text-align: center; 
        color: #4A90E2; 
        font-family: Arial, sans-serif; 
        margin-bottom: 20px;
    ">
        Visualisation de {param.capitalize()}
    </h3>
    """,
    unsafe_allow_html=True
)

visualise(df, param)
